workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"      
      when: never
    - when: always

stages:
  - test 
  - build
  - deploy

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  DEV_SERVER_HOST: 3.15.164.215
  DEV_ENDPOINT: http://ec2-3-15-164-215.us-east-2.compute.amazonaws.com:3000

run_unit_test:
  stage: test
  image: node:22-alpine3.19
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - app/node_modules
  tags:
    - ec2 
    - docker
    - remote
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

sast:
  stage: test

build_image:
  stage: build 
  tags:
    - ec2 
    - shell 
    - remote
  before_script:
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$PACKAGE_JSON_VERSION.$CI_PIPELINE_IID
    - echo $VERSION > version-file.txt
  script:
    - docker build -t $IMAGE_NAME:$VERSION .
  artifacts:
    paths:
      - version-file.txt

push_image:
  stage: build 
  needs:
    - build_image
  dependencies:
    - build_image
  tags:
    - ec2 
    - shell 
    - remote 
  before_script:
    - export VERSION=$(cat version-file.txt)
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script: 
    - docker push $IMAGE_NAME:$VERSION

deploy_to_dev:
  stage: deploy 
  tags:
    - ec2 
    - shell 
    - remote
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - export VERSION=$(cat version-file.txt)
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY docker-compose.yaml ec2-user@$DEV_SERVER_HOST:/home/ec2-user
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@$DEV_SERVER_HOST "
        echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY &&
        
        export DC_IMAGE_NAME=$IMAGE_NAME &&
        export DC_IMAGE_TAG=$VERSION &&

        docker-compose down &&
        docker-compose up -d"
  environment:
    name: development
    url: $DEV_ENDPOINT

include:
  - template: Jobs/SAST.gitlab-ci.yml
  